# $Id$
## @file
# VirtualBox Validation Kit - Bootsector Tests for Test Drivers or standalone testing.
#

#
# Copyright (C) 2006-2015 Oracle Corporation
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualBox OSE distribution. VirtualBox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#
# The contents of this file may alternatively be used under the terms
# of the Common Development and Distribution License Version 1.0
# (CDDL) only, as it comes in the "COPYING.CDDL" file of the
# VirtualBox OSE distribution, in which case the provisions of the
# CDDL are applicable instead of those of the GPL.
#
# You may elect to license modified versions of this file under the
# terms and conditions of either the GPL or the CDDL or both.
#

SUB_DEPTH = ../../../..
include $(KBUILD_PATH)/subheader.kmk


#
# Boot Sector "Linker" tool.
#
TOOL_VBoxBootSectorLd      = Joins one or more BS2 object files into a floppy img.
TOOL_VBoxBootSectorLd_LINK_MISCBIN_OUTPUT =
TOOL_VBoxBootSectorLd_LINK_MISCBIN_DEPEND =
TOOL_VBoxBootSectorLd_LINK_MISCBIN_DEPORD = $(VBoxBs2Linker_1_TARGET)
define TOOL_VBoxBootSectorLd_LINK_MISCBIN_CMDS
	$(VBoxBs2Linker_1_TARGET) -o $(out) $(objs) $(othersrc)
endef

BLDPROGS += VBoxBs2Linker
VBoxBs2Linker_TEMPLATE = VBoxBldProg
VBoxBs2Linker_SOURCES = VBoxBs2Linker.cpp


#
# Makes a boot sector test image.
#
TEMPLATE_VBoxBsTestImg = kBuild tool config for building boot sector stuff.
TEMPLATE_VBoxBsTestImg_INST    = $(INST_VALIDATIONKIT)bootsectors/
TEMPLATE_VBoxBsTestImg_BINSUFF = .img
TEMPLATE_VBoxBsTestImg_MODE    = 0644
TEMPLATE_VBoxBsTestImg_ASTOOL  = YASM
TEMPLATE_VBoxBsTestImg_ASFLAGS:= -f bin -P $(PATH_SUB_CURRENT)/bootsector2-first.mac $(VBOX_YASM_Wno-segreg-in-64bit) --mapfile
TEMPLATE_VBoxBsTestImg_ASDEFS  = ASM_FORMAT_BIN
TEMPLATE_VBoxBsTestImg_INCS    = \
	. \
	../../VMM/testcase/Instructions
TEMPLATE_VBoxBsTestImg_LDTOOL  = VBoxBootSectorLd


#
# The boot sector tests.
#
MISCBINS += bootsector-shutdown
bootsector-shutdown_TEMPLATE = VBoxBsTestImg
bootsector-shutdown_SOURCES = bootsector-shutdown.asm

MISCBINS += bootsector-pae
bootsector-pae_TEMPLATE = VBoxBsTestImg
bootsector-pae_SOURCES = bootsector-pae.asm

MISCBINS += bootsector-empty
bootsector-empty_TEMPLATE = VBoxBsTestImg
bootsector-empty_SOURCES = bootsector-empty.asm

MISCBINS += bootsector2-test1
bootsector2-test1_TEMPLATE = VBoxBsTestImg
bootsector2-test1_SOURCES = bootsector2-test1.asm

MISCBINS += bootsector2-cpu-hidden-regs-1
bootsector2-cpu-hidden-regs-1_TEMPLATE = VBoxBsTestImg
bootsector2-cpu-hidden-regs-1_SOURCES = bootsector2-cpu-hidden-regs-1.asm

MISCBINS += bootsector2-cpu-instr-1
bootsector2-cpu-instr-1_TEMPLATE = VBoxBsTestImg
bootsector2-cpu-instr-1_SOURCES = bootsector2-cpu-instr-1.asm

MISCBINS += bootsector2-cpu-pf-1
bootsector2-cpu-pf-1_TEMPLATE = VBoxBsTestImg
bootsector2-cpu-pf-1_SOURCES = bootsector2-cpu-pf-1.asm

MISCBINS += bootsector2-cpu-xcpt-1
bootsector2-cpu-xcpt-1_TEMPLATE = VBoxBsTestImg
bootsector2-cpu-xcpt-1_SOURCES = bootsector2-cpu-xcpt-1.asm

MISCBINS += bootsector2-cpu-xcpt-2
bootsector2-cpu-xcpt-2_TEMPLATE = VBoxBsTestImg
bootsector2-cpu-xcpt-2_SOURCES = bootsector2-cpu-xcpt-2.asm

MISCBINS += bootsector2-cpu-a20-1
bootsector2-cpu-a20-1_TEMPLATE = VBoxBsTestImg
bootsector2-cpu-a20-1_SOURCES = bootsector2-cpu-a20-1.asm

MISCBINS += bootsector2-cpu-basic-1
bootsector2-cpu-basic-1_TEMPLATE = VBoxBsTestImg
bootsector2-cpu-basic-1_SOURCES = bootsector2-cpu-basic-1.asm

MISCBINS += bootsector2-boot-registers-1
bootsector2-boot-registers-1_TEMPLATE = VBoxBsTestImg
bootsector2-boot-registers-1_SOURCES = bootsector2-boot-registers-1.asm

MISCBINS += bootsector2-triple-fault-1
bootsector2-triple-fault-1_TEMPLATE = VBoxBsTestImg
bootsector2-triple-fault-1_SOURCES = bootsector2-triple-fault-1.asm


ifeq ($(USERNAME),birdxx)
 if1of ($(KBUILD_HOST).$(KBUILD_HOST_ARCH),win.amd64)
#
# Generated instruction tests (work in progress).
#

VBOX_PATH_VBINSTST = $(PATH_ROOT)/src/VBox/VMM/testcase/Instructions
VBOX_VBINSTST_GEN  = $(VBOX_PATH_VBINSTST)/InstructionTestGen.py
VBOX_BOOTSECTOR2_VBINSTST_AMD64_GEN   = $(VBOX_BLD_PYTHON) $(VBOX_VBINSTST_GEN) \
		--split 3 --target bs2-r0-64 --output-base $(bootsectors_0_OUTDIR)/VBInsTst-64 --test-size tiny
VBOX_BOOTSECTOR2_VBINSTST_AMD64_FILES = $(shell $(VBOX_BOOTSECTOR2_VBINSTST_AMD64_GEN) --makefile-mode)

#$$(bootsectors_0_OUTDIR)/VBInsTst.ts + $$(VBOX_BOOTSECTOR2_VBINSTST_AMD64_FILES): $(VBOX_VBINSTST_GEN) | $$(dir $$@)
#	$(VBOX_BOOTSECTOR2_VBINSTST_AMD64_GEN)
#	$(APPEND) -t $@
#
#bootsectors_SOURCES += $(bootsectors_0_OUTDIR)/bootsector2-vbinstst-1.img
#bootsectors_CLEAN += $(VBOX_BOOTSECTOR2_VBINSTST_AMD64_FILES)
#
#$$(bootsectors_0_OUTDIR)/bootsector2-vbinstst-1.img: \
#		$(PATH_SUB_CURRENT)/bootsector2-vbinstst-64-1.asm \
#     		$$(bootsectors_0_OUTDIR)/VBInsTst-64.asm
#	$(TOOL_$(VBOX_ASTOOL)_AS) -f bin -D ASM_FORMAT_BIN -I $(dir $@) -I $(PATH_ROOT)/include -I $(VBOX_PATH_VBINSTST) -o $@ -L nasm -l $@.lst $<

MISCBINS += bootsector2-vbinstst-kernel
bootsector2-vbinstst-kernel_TEMPLATE = VBoxBsTestImg
bootsector2-vbinstst-kernel_SOURCES = \
	bootsector2-vbinstst-kernel.asm


MISCBINS += bootsector2-vbinstst-64-1
bootsector2-vbinstst-64-1_TEMPLATE = VBoxBsTestImg
bootsector2-vbinstst-64-1_DEFS = \
	BS2_BIG_IMAGE_LM64 \
	BS2_BIG_IMAGE_GEN_SOURCE_FILE=bs2-vbinstst-64-1.asm \
	BS2_BIG_IMAGE_GEN_TEST_NAME=\"bs2-vbinstst-64-1\"
bootsector2-vbinstst-64-1_INCS = $(bootsector2-vbinstst-64-1_0_OUTDIR)/
bootsector2-vbinstst-64-1_SOURCES = \
	bootsector2-vbinstst-kernel.asm \
	bootsector2-vbinstst-big-template.asm
bootsector2-vbinstst-64-1_INTERMEDIATES = \
	$(bootsector2-vbinstst-64-1_0_OUTDIR)/bs2-vbinstst-64-1.asm
bootsector2-vbinstst-64-1_CLEAN = \
	$(bootsector2-vbinstst-64-1_0_OUTDIR)/bs2-vbinstst-64-1.asm

$$(bootsector2-vbinstst-64-1_0_OUTDIR)/bs2-vbinstst-64-1.asm: $(VBOX_VBINSTST_GEN) | $$(dir $$@)
	$(VBOX_BLD_PYTHON) $(VBOX_VBINSTST_GEN) --target bs2-r0-64-big --output-base $(basename $@) --test-size medium

MISCBINS += bootsector2-vbinstst-32-1
bootsector2-vbinstst-32-1_TEMPLATE = VBoxBsTestImg
bootsector2-vbinstst-32-1_DEFS = \
	BS2_BIG_IMAGE_PP32 \
	BS2_BIG_IMAGE_GEN_SOURCE_FILE=bs2-vbinstst-32-1.asm \
	BS2_BIG_IMAGE_GEN_TEST_NAME=\"bs2-vbinstst-32-1\"
bootsector2-vbinstst-32-1_INCS = $(bootsector2-vbinstst-32-1_0_OUTDIR)/
bootsector2-vbinstst-32-1_SOURCES = \
	bootsector2-vbinstst-kernel.asm \
	bootsector2-vbinstst-big-template.asm
bootsector2-vbinstst-32-1_INTERMEDIATES = \
	$(bootsector2-vbinstst-32-1_0_OUTDIR)/bs2-vbinstst-32-1.asm
bootsector2-vbinstst-32-1_CLEAN = \
	$(bootsector2-vbinstst-32-1_0_OUTDIR)/bs2-vbinstst-32-1.asm

$$(bootsector2-vbinstst-32-1_0_OUTDIR)/bs2-vbinstst-32-1.asm: $(VBOX_VBINSTST_GEN) | $$(dir $$@)
	$(VBOX_BLD_PYTHON) $(VBOX_VBINSTST_GEN) --target bs2-r0-32-big --output-base $(basename $@) --test-size medium

 endif
endif # bird-only


ifeq ($(USER),bird) # work in progress.

#
# BS3Kit
#

# Dummy CP "linker" tool.
TOOL_VBoxBsCpLd = Dummy copy linker.
TOOL_VBoxBsCpLd_LINK_MISCBIN_OUTPUT =
TOOL_VBoxBsCpLd_LINK_MISCBIN_DEPEND =
TOOL_VBoxBsCpLd_LINK_MISCBIN_DEPORD =
define TOOL_VBoxBsCpLd_LINK_MISCBIN_CMDS
	$(CP) -- $(objs) $(othersrc) "$(out)"
endef

# Dummy exit 1 "linker" tool.
TOOL_VBoxBsUnusedLd = Dummy unused linker.
TOOL_VBoxBsUnusedLd_LINK_MISCBIN_OUTPUT =
TOOL_VBoxBsUnusedLd_LINK_MISCBIN_DEPEND =
TOOL_VBoxBsUnusedLd_LINK_MISCBIN_DEPORD =
define TOOL_VBoxBsUnusedLd_LINK_MISCBIN_CMDS
	echo "cannot use this template for linking"
	exit 1
endef

# BS3Kit template for assembly and 16-bit code.
TEMPLATE_VBoxBS3KitImg = Template for building BS3Kit test images.
TEMPLATE_VBoxBS3KitImg_INST     = $(INST_VALIDATIONKIT)bootsectors/
TEMPLATE_VBoxBS3KitImg_BINSUFF  = .img
TEMPLATE_VBoxBS3KitImg_MODE     = 0644
TEMPLATE_VBoxBS3KitImg_ASTOOL   = NASM
TEMPLATE_VBoxBS3KitImg_ASFLAGS := -f obj -g -w+orphan-labels #-P $(PATH_SUB_CURRENT)/bootsector2-first.mac
TEMPLATE_VBoxBS3KitImg_ASDEFS   = ASM_FORMAT_OMF __NASM__
TEMPLATE_VBoxBS3KitImg_ARTOOL   = OPENWATCOM-16
TEMPLATE_VBoxBS3KitImg_CTOOL    = OPENWATCOM-16
TEMPLATE_VBoxBS3KitImg_CXXTOOL  = OPENWATCOM-16
TEMPLATE_VBoxBS3KitImg_CFLAGS   = -nt=TEXT16 -nd=DATA16 -nc=CODE16
TEMPLATE_VBoxBS3KitImg_CXXFLAGS = -nt=TEXT16 -nd=DATA16 -nc=CODE16
TEMPLATE_VBoxBS3KitImg_INCS     = bs3kit .
TEMPLATE_VBoxBS3KitImg_LDTOOL   = OPENWATCOM-WL
TEMPLATE_VBoxBS3KitImg_LDFLAGS  = \
 	output raw offset=0x10000 \
 	order \
 	 clname CODE16 \
 	  segment TEXT16  segaddr=0x1000 \
 	 clname DATA16 \
 	  segment DATA16  segaddr=0x1000 \
        clname CODE32 \
 	  segment TEXT32 \
        clname DATA32 \
 	  segment DATA32

# BS3Kit template for 32-bit code.
TEMPLATE_VBoxBS3KitImg32 = Template for building BS3Kit test images.
TEMPLATE_VBoxBS3KitImg32_INSTTYPE = none
TEMPLATE_VBoxBS3KitImg32_ASTOOL   = NASM
TEMPLATE_VBoxBS3KitImg32_ASFLAGS := -f obj -g -w+orphan-labels #-P $(PATH_SUB_CURRENT)/bootsector2-first.mac
TEMPLATE_VBoxBS3KitImg32_ASDEFS   = ASM_FORMAT_OMF __NASM__
TEMPLATE_VBoxBS3KitImg32_ARTOOL   = OPENWATCOM
TEMPLATE_VBoxBS3KitImg32_CTOOL    = OPENWATCOM
TEMPLATE_VBoxBS3KitImg32_CXXTOOL  = OPENWATCOM
TEMPLATE_VBoxBS3KitImg32_CFLAGS   = -nt=TEXT32 -nd=DATA32 -nc=CODE32
TEMPLATE_VBoxBS3KitImg32_CXXFLAGS = -nt=TEXT32 -nd=DATA32 -nc=CODE32
TEMPLATE_VBoxBS3KitImg32_INCS     = bs3kit .
TEMPLATE_VBoxBS3KitImg32_LDTOOL   = VBoxBsUnusedLd

# BS3Kit template for 64-bit code.
TEMPLATE_VBoxBS3KitImg64 = Template for building BS3Kit test images.
TEMPLATE_VBoxBS3KitImg64_INSTTYPE = none
TEMPLATE_VBoxBS3KitImg64_ASTOOL   = NASM
TEMPLATE_VBoxBS3KitImg64_ASFLAGS := -f elf64 -g -w+orphan-labels #-P $(PATH_SUB_CURRENT)/bootsector2-first.mac
TEMPLATE_VBoxBS3KitImg64_ASDEFS   = ASM_FORMAT_ELF __NASM__ TMPL
TEMPLATE_VBoxBS3KitImg64_ARTOOL   = OPENWATCOM
TEMPLATE_VBoxBS3KitImg64_CTOOL    = DUMMY
TEMPLATE_VBoxBS3KitImg64_CXXTOOL  = DUMMY
TEMPLATE_VBoxBS3KitImg64_INCS     = bs3kit .
TEMPLATE_VBoxBS3KitImg64_LDTOOL   = VBoxBsUnusedLd

# BS3Kit template for the bootsector.
TEMPLATE_VBoxBS3KitBS = Template for building BS3Kit test images.
TEMPLATE_VBoxBS3KitBS_INST     = $(INST_VALIDATIONKIT)bootsectors/
TEMPLATE_VBoxBS3KitBS_INSTTYPE = none
TEMPLATE_VBoxBS3KitBS_BINSUFF  = .img
TEMPLATE_VBoxBS3KitBS_MODE     = 0644
TEMPLATE_VBoxBS3KitBS_ASTOOL   = YASM
TEMPLATE_VBoxBS3KitBS_ASFLAGS := -f bin --mapfile
TEMPLATE_VBoxBS3KitBS_ASDEFS   = ASM_FORMAT_BIN __YASM__
TEMPLATE_VBoxBS3KitBS_INCS     = bs3kit
TEMPLATE_VBoxBS3KitBS_LDTOOL   = VBoxBsCpLd

# The boot sector.
MISCBINS += bs3-bootsector
bs3-bootsector_TEMPLATE = VBoxBS3KitBS
bs3-bootsector_SOURCES  = bs3kit/bs3-bootsector.asm

# The BS3Kit library.
LIBRARIES += bs3kit-common-16
bs3kit-common-16_TEMPLATE = VBoxBS3KitImg
bs3kit-common-16_DEFS     = TMPL_PE16 BS3_CMN_ONLY
bs3kit-common-16_SOURCES  = \
	bs3kit/bs3-shutdown.asm

# The 32-bit BS3Kit library.
LIBRARIES += bs3kit-common-32
bs3kit-common-32_TEMPLATE = VBoxBS3KitImg32
bs3kit-common-32_DEFS     = TMPL_PE32 BS3_CMN_ONLY
bs3kit-common-32_SOURCES  = \
	bs3kit/bs3-shutdown.asm

# The 64-bit BS3Kit library.
LIBRARIES += bs3kit-common-64
bs3kit-common-64_TEMPLATE = VBoxBS3KitImg64
bs3kit-common-64_DEFS     = TMPL_LM64 BS3_CMN_ONLY
bs3kit-common-64_SOURCES  = \
	bs3kit/bs3-shutdown.asm

endif # experimental

include $(FILE_KBUILD_SUB_FOOTER)

